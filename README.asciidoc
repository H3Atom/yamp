= Yamp - Yet Another Macro Processor - for YAML
Peter Birch <birchb1024@gmail.com>
v0.1, 2019-01-01
:toc: macro
YAML is human friendly data serialization standard. footnote:[YAML stands for Yet Another Markup Language. See https://yaml.org/]  Yamp is a general-purpose macroprocessor for YAML files.  Both its input and output are YAML, it scans the input for symbols an makes substitutions and expansions on the output. yamp is 100% YAML so the syntax for defining and calling macros is YAML also.

.TL;DR - Input
[source, YAML]
----
defmacro:
    name: foo
    args: [who]
    value: 
        Hello: who
foo: 
    who: World
----

.Output
[source, YAML]
----
Hello: World
----

toc::[]
# Get Started

Yamp is a Python 2.7 program contained in a single file. Assuming one has installed Python the program is run from the command-line giving the input file to parse as the first argument followed by optional arguments to the expansion. The expansion is written to the standard output:

.Usage
[source,bash]
----
$ python yamp.py <myinputfile>.yaml [arg1..argn]
----

## An example - Pipelines as Code.

Supposing we are building some https://github.com/tomzo/gocd-yaml-config-plugin[GoCD] pipeline definitions in YAML each of which uses the same Git repository.  The YAML we have to write looks like this:

.output.yaml
[source,YAML]
----
pipelines:
  mypipe1: 
    group: mygroup
    label_template: "${COUNT}"
    materials: # <1>
      mygit:
        git: http://my.example.org/mygit.git
        branch: master
    stages:

  mypipe2: 
    group: mygroup
    label_template: "${COUNT}"
    materials: # <1>
      mygit:
        git: http://my.example.org/mygit.git 
        branch: ci
    stages:
----
<1> Duplicated

We don't want re-key duplicated code so we define a macro which yamp expands whenever it is invoked. Our yamp source code now looks like this:
.YAML source
[source,YAML]
----
define: # <1>
    name: mygit_repo_url
    value: http://my.example.org/mygit.git

defmacro: # <2>
    name: mygit_materials
    args: [branch_name]
    body:
      mygit:
        git: mygit_repo_url # <3>
        branch: branch_name
---
pipelines:
  mypipe1: 
    group: mygroup
    label_template: "${COUNT}"
    materials: {mygit_materials: {branch_name: master}} # <4>
    stages:

  mypipe2: 
    group: mygroup
    label_template: "${COUNT}"
    materials:
        mygit_materials: 
            branch_name: ci # <5>
    stages:
----
<1> simple variable definition
<2> a macro Definition
<3> variable used
<4> a macro call - inline
<3> a macro call - using indentation

When run through yamp, the output is as above. Now we have a single place where the git repository is defined, if we need to change it we can change it once. 

# Applications

This program is general-purpose, it can be used wherever YAML is required. It's first uses were for GoCd pipelines and Ansible playbooks. Since YAML is a superset of JSON it can also be used to generate JSON for, say, Azure ARM files.

# Similar Tools

There are many great general-purpose macro-processors available, starting with the venerable `GPM`, through `m4`, cpp, and lately, Jinja2. However these are predominantly character-based and the programmer has to compute the indentation required by YAML by counting spaces. Like previous authors we started on this course of writing yet another macro-processor primarily for reasons of laziness. Since yamp transforms dictionaries and lists not character strings, indentation is taken care of.


# Reference

This section describes the operation of the processor and the macros available. 

## Processing

### String interpolation 

[source, YAML]
----
define: {name: 'AXA', value: 'A{{ X }}A'}
AXA: Christopher
# Produces
AChristopherA
----


## Variables

### `+define+` - Definition of Variables

### Scalars

### Collections

### Variable Interpolation with dot syntax

## Macros

## `+defmacro+`

## Conditional Expansion with `+if then else+`

## Testing equality with `+==+`

## Looping with `+repeat+`

## Arithmetic with `+++`

## Reading files with `+include+`

## Evaluating Python expressions
[source, YAML]
----
- {python: ' 2**10 '}
# Produces
- 1024
----


[source, YAML]
----
include: <filename>
----

## Builtin Variables

### `+__FILE__+` - the current source filename

### `+__name__+` - the current macro expansion

### `+env+` - process environment

### `+argv+` - command line arguments


